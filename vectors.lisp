(in-package :hexhammer)

(defmacro dir-list (start count)
  (let* ((dir-list (list :n :nnw :nw :w :sw :ssw :s :sse :se :e :ne :nne))
	 (start-list (member start dir-list)))
    (when (null start-list) (error "There is no direction ~a!~%" start))
    (rplacd (last dir-list) dir-list)
    `(list ,@(loop repeat count for dir in start-list collect dir))))

;;should be used with normie coordinate space:
;; X is east, Y is north, Z is up
(defun surface-normal (point-0 ele-0 point-1 ele-1 point-2 ele-2)
  (let ((vector-01 (list (- (x point-1) (x point-0))
			 (- (y point-1) (y point-0))
			 (- ele-1 ele-0)))
	(vector-02 (list (- (x point-2) (x point-0))
			 (- (y point-2) (y point-0))
			 (- ele-2 ele-0))))
    (list (- (* (second vector-01)
		(third vector-02))
	     (* (third vector-01)
		(second vector-02)))
	  (- (* (third vector-01)
		(first vector-02))
	     (* (first vector-01)
		(third vector-02)))
	  (- (* (first vector-01)
		(second vector-02))
	     (* (second vector-01)
		(first vector-02))))))

(defun form-normal (dir-a dir-b hex)
  (surface-normal (unit-hex-crd :cen) (hex-vertex hex :cen)
		  (unit-hex-crd dir-a) (hex-vertex hex dir-a)
		  (unit-hex-crd dir-b) (hex-vertex hex dir-b)))



(defun vector-angle (vector-1 vector-2)
  (acos (/ (+ (* (first vector-1) (first vector-2))
	      (* (second vector-1) (second vector-2))
	      (* (third vector-1) (third vector-2)))
	   (* (sqrt (+ (expt (first vector-1) 2)
		       (expt (second vector-1) 2)
		       (expt (third vector-1) 2)))
	      (sqrt (+ (expt (first vector-2) 2)
		       (expt (second vector-2) 2)
		       (expt (third vector-2) 2)))))))

(defun vertex-normal (normals)
  (let ((count (length normals)))
    (loop for (x y z) in normals
	  sum x into x-sum
	  sum y into y-sum
	  sum z into z-sum
	  finally (return (list (/ x-sum count)
				(/ y-sum count)
				(/ z-sum count))))))

(defun vertex-triangle-normals (crd dir world)
  (macrolet ((list-tris (dira dirb count hex)
	       (let ((a (gensym "dira"))
		     (b (gensym "dirb")))
		 `(when ,hex
		    (mapcar #'(lambda (,a ,b)
				(form-normal ,a ,b ,hex))
			    (dir-list ,dira ,count)
			    (dir-list ,dirb ,count))))))
    (let ((hex (hex-at crd world)))
      (case dir
	(:CEN (list-tris :s :sse 12 hex))
	(:N (let ((n-hex (hex-at (crd-neighbour crd :n) world)))
	      (append (list-tris :nne :n 2 hex)
		      (list-tris :ssw :s 2 n-hex))))
	(:NNW (let ((n-hex (hex-at (crd-neighbour crd :n) world))
		    (nw-hex (hex-at (crd-neighbour crd :nw) world)))
		(append (list-tris :n :nnw 2 hex)
			(list-tris :sw :ssw 2 n-hex)
			(list-tris :se :e 2 nw-hex))))
	(:NW (let ((nw-hex (hex-at (crd-neighbour crd :nw) world)))
	       (append (list-tris :nnw :nw 2 hex)
		       (list-tris :sse :se 2 nw-hex))))
	(:W (let ((nw-hex (hex-at (crd-neighbour crd :nw) world))
		  (sw-hex (hex-at (crd-neighbour crd :sw) world)))
	      (append (list-tris :nw :w 2 hex)
		      (list-tris :s :sse 2 nw-hex)
		      (list-tris :ne :nne 2 sw-hex))))
	(:SW (let ((sw-hex (hex-at (crd-neighbour crd :sw) world)))
	       (append (list-tris :w :sw 2 hex)
		       (list-tris :e :ne 2 sw-hex))))
	(:SSW (let ((sw-hex (hex-at (crd-neighbour crd :sw) world))
		    (s-hex (hex-at (crd-neighbour crd :s) world)))
		(append (list-tris :sw :ssw 2 hex)
			(list-tris :se :e 2 sw-hex)
			(list-tris :n :nnw 2 s-hex))))
	(:S (let ((s-hex (hex-at (crd-neighbour crd :s) world)))
	      (append (list-tris :ssw :s 2 hex)
		      (list-tris :nne :n 2 s-hex))))
	(:SSE (let ((s-hex (hex-at (crd-neighbour crd :s) world))
		    (se-hex (hex-at (crd-neighbour crd :se) world)))
		(append (list-tris :s :sse 2 hex)
			(list-tris :ne :nne 2 s-hex)
			(list-tris :nw :w 2 se-hex))))
	(:SE (let ((se-hex (hex-at (crd-neighbour crd :se) world)))
	       (append (list-tris :sse :se 2 hex)
		       (list-tris :nnw :nw 2 se-hex))))
	(:E (let ((se-hex (hex-at (crd-neighbour crd :se) world))
		  (ne-hex (hex-at (crd-neighbour crd :ne) world)))
	      (append (list-tris :se :e 2 hex)
		      (list-tris :n :nnw 2 se-hex)
		      (list-tris :sw :ssw 2 ne-hex))))
	(:NE (let ((ne-hex (hex-at (crd-neighbour crd :ne) world)))
	       (append (list-tris :e :ne 2 hex)
		       (list-tris :w :sw 2 ne-hex))))
	(:NNE (let ((ne-hex (hex-at (crd-neighbour crd :ne) world))
		    (n-hex (hex-at (crd-neighbour crd :n) world)))
		(append (list-tris :ne :nne 2 hex)
			(list-tris :nw :w 2 ne-hex)
			(list-tris :s :sse 2 n-hex))))))))

(defun light-value (vector)
  (/ (vector-angle *light-vector* vector)
     +sf-pi+))

(defun vertex-light-value (crd dir world &optional (scaler 1.0))
  (* scaler
     (light-value
      (vertex-normal
       (vertex-triangle-normals crd dir world)))))
